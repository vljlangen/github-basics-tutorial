[["index.html", "GitHub Basics for Academic Researchers – or Anyone, Really Introduction 0.1 What You’ll Learn 0.2 Why GitHub for Academics? 0.3 Prerequisites", " GitHub Basics for Academic Researchers – or Anyone, Really Ville Langén 2025-07-12 Introduction Goal: Learn GitHub essentials in 30 minutes and start collaborating on your academic projects. This tutorial will guide you through everything you need to know to get started with GitHub as an academic researcher. No prior programming experience required – just follow the steps and you’ll be ready to use GitHub for your research projects, collaborate with colleagues, and share your work with the world. 0.1 What You’ll Learn By the end of this tutorial, you’ll be able to: Understand what GitHub is and why it’s essential for academics Install and configure Git on your computer Create a GitHub account with secure authentication Use the essential Git commands for daily work Create repositories and manage your academic projects Follow a simple three-command workflow for everyday use 0.2 Why GitHub for Academics? GitHub is perfect for: Research Projects: Version control for your analysis scripts, papers, and data Collaboration: Work with colleagues around the world on shared projects Open Science: Share your code and data with the research community Academic Websites: Host your professional website (like we did in the main tutorial!) Teaching: Share course materials and collect student assignments Portfolio: Showcase your programming and research skills 0.3 Prerequisites You need: A computer with internet connection An email address 30 minutes of focused time You don’t need: Prior programming experience Knowledge of command line tools Understanding of version control systems Let’s get started! In the next chapter, we’ll create your GitHub account and set up your profile. "],["what-is-github.html", "Chapter 1 What is GitHub? 1.1 What You’ll Learn", " Chapter 1 What is GitHub? Before we dive into installation and setup, let’s understand what GitHub is: GitHub is a web-based platform that uses Git for version control. Think of it as: A cloud-based code repository with version tracking and collaboration features A social network for developers and researchers A backup system that keeps track of every change you make A collaboration tool that lets multiple people work on the same project Git vs. GitHub: Git = A version control system (software) invented by Finnish Linus Torvalds in 2005 GitHub = The online platform that hosts Git repositories 1.1 What You’ll Learn In the following chapters, we’ll walk through everything you need to get started: Chapter 2: Install and Configure Git Install Git on your local machine (macOS, Windows, Linux) Set up your Git identity Verify everything is working Chapter 3: Create Your GitHub Account Sign up for GitHub Chapter 4: Personal Access Token Set up secure GitHub authentication with a Personal Access Token (PAT) Chapter 5: Essential Git Commands Learn the basic Git commands you’ll use daily Understand the Git workflow Chapter 6: Complete GitHub Workflow Put it all together Create your first repository Learn the simple daily workflow Next: Install Git on your computer and configure your identity. "],["install-and-configure-git.html", "Chapter 2 Install and Configure Git 2.1 macOS 2.2 Windows 2.3 Linux (Ubuntu/Debian) 2.4 Verify Git Installation 2.5 Configure Git", " Chapter 2 Install and Configure Git Image credit: Git Logo by Jason Long 2.1 macOS Git is already installed on your Mac! No additional installation needed. 2.2 Windows Download and install from git-scm.com Important: During installation, select “Git Bash” for command line access. 2.3 Linux (Ubuntu/Debian) sudo apt update sudo apt install git 2.4 Verify Git Installation git --version # Should show: git version 2.x.x 2.5 Configure Git Set your identity for Git by opening a terminal (macOS/Linux) or Git Bash (Windows) and running these commands: git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;your.email@university.edu&quot; Next Chapter Preview: We’ll create your GitHub account, choose a good username, and complete the account verification process. "],["create-your-github-account.html", "Chapter 3 Create Your GitHub Account 3.1 Visit GitHub 3.2 Choose Your Username 3.3 Fill Out the Form 3.4 Choose Your Plan 3.5 Complete Email Verification", " Chapter 3 Create Your GitHub Account 3.1 Visit GitHub Go to github.com Click the “Sign up” button (green button in top right) 3.2 Choose Your Username ⚠️ Important: Your username will be part of your professional identity online. Good username examples: john-smith-research j.smith.phd johnsmith-bio drjohnsmith Avoid: Random numbers: johnsmith12345 Too casual: coolguy2023 Too long: john-smith-professor-of-biology-at-university 3.3 Fill Out the Form Username: Choose carefully (see above) Email: Use your academic email if possible Password: Use a strong password Verify account: Complete the puzzle/verification 3.4 Choose Your Plan Free plan is perfect for academic use Includes unlimited public repositories Includes unlimited private repositories Click “Create account” 3.5 Complete Email Verification Check your email for verification message Click the verification link This activates your account That’s it! Your GitHub account is now ready to use. Next Chapter Preview: We’ll set up Personal Access Tokens and configure platform-specific authentication so your computer can securely communicate with GitHub. "],["personal-access-token.html", "Chapter 4 Personal Access Token 4.1 Preferred Method: R + RStudio 4.2 Alternative: Git CLI + Credential Helper 4.3 Testing Your Setup 4.4 Troubleshooting", " Chapter 4 Personal Access Token Image credit: Unsplash GitHub requires a Personal Access Token (PAT) instead of passwords for Git operations. 4.1 Preferred Method: R + RStudio If you don’t already have R and RStudio installed, it’s very easy and highly recommended to install them: R: Download from https://cran.r-project.org/ RStudio: Download from https://posit.co/download/rstudio-desktop/ Both are free and install quickly on all major operating systems. The easiest way to set up GitHub authentication is to run the following commands in R or RStudio: install.packages(c(&quot;usethis&quot;, &quot;gitcreds&quot;)) usethis::create_github_token() # Opens browser to create PAT gitcreds::gitcreds_set() # Enter your PAT when prompted When you run usethis::create_github_token(), it will open your browser to GitHub where you’ll need to: Click “Generate new token (classic)” Give it a descriptive name (e.g., “Academic Projects 2024”) Set expiration (recommended: 90 days for learning, 1 year for regular use) Select scopes (the function pre-selects the right ones, but verify you have repo, workflow, and user) Click “Generate token” Copy the token immediately - you won’t see it again! Store it in a password manager for safekeeping. Then return to R/RStudio and run gitcreds::gitcreds_set() to enter your PAT when prompted. That’s it! 4.2 Alternative: Git CLI + Credential Helper If you do not want to install R and RStudio, you can create your PAT manually on GitHub: Go to GitHub Settings → Developer settings → Personal access tokens → Tokens (classic), then follow the same steps as described above (click “Generate new token (classic)”, give it a name, set expiration, select scopes, generate and copy the token). Then configure your credential helper: macOS: git config --global credential.helper osxkeychain Windows: git config --global credential.helper manager-core When you clone or push, you’ll be asked for: Username: your_github_username Password: your_PAT_here ✅ Git will remember the token after this — no need to reenter. 4.3 Testing Your Setup 4.3.1 Verify Git Configuration git config --list # Should show your name and email 4.3.2 Test Authentication Try cloning a repository: git clone https://github.com/username/repository.git When prompted, enter: Username: your_github_username Password: your_PAT (not your account password!) Notes: If you used the R/RStudio method above, you might not be asked for credentials at all since they’re already stored securely. If using the credential helpers (explained above), Git will remember your token for future use. 4.4 Troubleshooting 4.4.1 Authentication Failed Common issues: Using account password instead of PAT Token has expired Insufficient token permissions Typo in username or token Solutions: Verify you’re using the PAT, not your password Check token expiration date Ensure token has “repo” scope Try clearing credentials and re-entering Next Chapter Preview: Now that you have Git installed and authentication configured, we’ll learn the essential Git commands for daily workflow: add, commit, push, and pull. "],["essential-git-commands.html", "Chapter 5 Essential Git Commands 5.1 Understanding Git Workflow 5.2 Essential Git Commands 5.3 Daily Research Workflow", " Chapter 5 Essential Git Commands Image credit: Pexels 5.1 Understanding Git Workflow Before diving into commands, let’s understand the basic Git workflow: Basic Workflow: Modify files in your working directory Stage changes you want to include in next commit Commit staged changes to repository Push commits to GitHub 5.2 Essential Git Commands 5.2.1 1. Starting a Repository Option A: Clone existing repository git clone https://github.com/username/repository-name.git cd repository-name Option B: Initialize new repository mkdir my-project cd my-project git init 5.2.2 2. Check Status Most important command - use frequently: git status This shows: Which files are modified Which files are staged Which files are untracked 5.2.3 3. Stage Changes Stage specific files (rarely used): git add filename.txt git add folder/ Stage all changes (used almost always): git add . 5.2.4 4. Commit Changes Commit with message (used almost always): git commit -m &quot;Add introduction chapter&quot; Commit with detailed message (rarely used): git commit -m &quot;Add introduction chapter - Added overview of research methodology - Included literature review section - Fixed formatting issues in references&quot; 5.2.5 5. View History See commit history: git log See compact history: git log --oneline See last 5 commits: git log --oneline -5 5.2.6 6. Synchronize with GitHub Push your changes to GitHub: git push Pull latest changes from GitHub: git pull 5.2.7 7. Undo Changes ⚠️ WARNING: These commands are for experienced users only! If you’re new to Git, please consult a more experienced Git user before venturing into this jungle. These commands can permanently delete your work if used incorrectly. Unstage files: git reset filename.txt Discard changes in working directory: git checkout -- filename.txt Undo last commit (keep changes): git reset --soft HEAD~1 ⚠️ Dangerous: Undo last commit and discard changes: git reset --hard HEAD~1 5.3 Daily Research Workflow # Start your day git status # Check current state git pull # Get latest changes # Work on your files # ... edit files ... # Save your work git add . # Stage all changes git status # Review what you&#39;re committing git commit -m &quot;Update analysis results&quot; git push # Share your changes Next Chapter Preview: Now that you know the essential Git commands, you’re ready to put everything together into a complete workflow. In the next chapter, we’ll create your first GitHub repository, connect it to your local computer, and learn the three-command workflow that handles 90% of your daily Git needs. "],["complete-github-workflow.html", "Chapter 6 Complete GitHub Workflow 6.1 Getting Your Work on GitHub 6.2 Step 1: Create Repository on GitHub 6.3 Step 2: Connect Your Local Site to GitHub 6.4 Common Git Commands 6.5 Daily Workflow Example 6.6 Common Commit Messages 6.7 Troubleshooting 6.8 Next Steps", " Chapter 6 Complete GitHub Workflow 6.1 Getting Your Work on GitHub Now that you have Git installed and authentication set up, let’s create your first repository and learn the simple workflow you’ll use every day. 6.2 Step 1: Create Repository on GitHub Click the green “New” button on GitHub Repository name: my-project (or whatever you prefer) Make it Public (required for free hosting) Don’t check “Add a README” (you already have one) Click “Create repository” 6.3 Step 2: Connect Your Local Site to GitHub Copy the commands GitHub shows you, but here’s what you’ll run: # Make sure you&#39;re in your project directory cd ~/projects/my-project # Create a sample file if you don&#39;t have any files yet touch README.md echo &quot;# My Project&quot; &gt; README.md # Add your changes git add . git commit -m &quot;My project setup&quot; # Set branch to main (important!) git branch -M main # Connect to your GitHub repository git remote add origin https://github.com/YOUR-USERNAME/my-project.git # Push to GitHub git push -u origin main Replace YOUR-USERNAME with your actual GitHub username. 6.4 Common Git Commands Here are the only Git commands you need as a beginner: 6.4.1 See what’s changed git status 6.4.2 Save changes locally git add . git commit -m &quot;Description of what you changed&quot; 6.4.3 Send to GitHub git push 6.4.4 Get latest from GitHub (if editing from multiple computers) git pull 6.5 Daily Workflow Example Here’s what a typical day looks like: Morning (if you work on multiple computers): git pull # Get any changes from other computers After making changes: git status # See what you&#39;ve changed git add . # Stage all changes git commit -m &quot;Updated content with new information&quot; git push # Send to GitHub That’s literally it! You now know everything you need to manage your project with Git and GitHub. 6.6 Common Commit Messages Here are examples of good commit messages: git commit -m &quot;Added new content to main page&quot; git commit -m &quot;Updated about section with new information&quot; git commit -m &quot;Fixed typo in contact information&quot; git commit -m &quot;Added image to about page&quot; git commit -m &quot;Updated project documentation&quot; 6.7 Troubleshooting 6.7.1 If you get an error about authentication: Make sure you’re using your Personal Access Token (not your password) Check that your token hasn’t expired Review the authentication setup from Chapter 4 6.7.2 If you get merge conflicts: This happens if you edit from multiple computers Run git pull first, then resolve any conflicts in the files Then git add ., git commit, and git push If the merge conflict is not resolved, refer to my separate e-book on problems with diverging branches. 6.8 Next Steps Congratulations! You now have: ✅ Git installed and configured ✅ GitHub account with secure authentication ✅ Your first repository ✅ A simple daily workflow You’re ready to start building and maintaining your project with confidence! What’s Next? Consider exploring: GitHub Pages for hosting your project Other hosting platforms for more advanced features GitHub Desktop if you prefer a visual interface VS Code integration for editing directly in your code editor "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
